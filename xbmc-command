#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#
# simple XBMC command client.
#
# Copyright (C) 2013-2020 Christoph GÃ¶ttschkes
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

import argparse

try:
    import ConfigParser as configparser
except ImportError:
    import configparser

import importlib
import os
import shlex
import sys

import xbmc_command

__prog__ = xbmc_command.core.PROG
__version__ = xbmc_command.core.VERSION

__usage__ = ""

__help__ = ""
__help__ += "%%s\n"
__help__ += "Connects to the XBMC Mediacenter at <host>:<port> via TCP\n"
__help__ += "and executes the specified command.\n"
__help__ += "\n"
__help__ += "If --host, --port or --timeout is not present and the config\n"
__help__ += "file ~/.config/xbmc-command.cfg is readable, the values\n"
__help__ += "specified in this file will be used.\n"
__help__ += "\n"
__help__ += "Optional arguments:\n"
__help__ += "  --host <host>     connect to server at host <host>\n"
__help__ += "  --port <port>     connect to server at port <port>\n"
__help__ += "  --timeout <sec>   wait <sec> till timeout, default 5\n"
__help__ += "  --help            show this help message and exit\n"
__help__ += "  --version         output version information and exit\n"
__help__ += "\n"
__help__ += "Available commands are:\n"
__help__ += "%%s\n"
__help__ += "See '%s <command> --help' for more information\n"
__help__ += "on a specific command.\n"
__help__ = __help__.lstrip() % (__prog__)

__version__ = "%s version %s\n" % (__prog__, __version__)

def create_help():
    shift = str(len('usage: ' + __prog__ + ' ') - 3)
    available_commands = ''
    for command in xbmc_command.__all__:
        available_commands += '  %-' + shift + 's %s\n'
        cmd = command_type(command)()
        available_commands = available_commands % (command, cmd.short_description)

    return __help__ % (__usage__, available_commands)

def main(host, port, timeout, command, args):
    command = command()

    xbmc = xbmc_command.core.XBMC(host, port)
    xbmc.settimeout(timeout)
    command.xbmc = xbmc

    args = command.parse_args(args)

    if not host:
        exit_usage('%s: error: no host specified' % __prog__)

    if not port:
        exit_usage('%s: error: no port specified' % __prog__)

    try:
        command.run_command(args)
    except xbmc_command.core.CommandException as err:
        sys.exit(err.msg)
    finally:
        xbmc.close()

def apply_alias(alias_dict, command, args):
    for key, value in alias_dict.items():
        if key == command:
            alias_split = shlex.split(value)
            return (alias_split[0], alias_split[1:] + args)
    return (command, args)

def command_type(command):
    try:
        cmd = command.replace('-', '_')
        return importlib.import_module('xbmc_command.%s' % cmd).Command
    except:
        raise RuntimeError("command '%s' not found" % command)

class ConfigParser(configparser.SafeConfigParser, object):

    def __init__(self):
        configparser.SafeConfigParser.__init__(self)
        self.optionxform = str

    def get(self, section, option):
        if not self.has_section(section) or not self.has_option(section, option):
            return None
        return super(ConfigParser, self).get(section, option)

def print_help():
    __help__ = create_help()
    sys.stdout.write(__help__)
    sys.exit(0)

def exit_usage(msg):
    sys.stdout.write(__usage__)
    sys.exit(msg)

if __name__ == '__main__':
    CONF = ConfigParser()
    CONF.read(os.path.expanduser("~/.config/xbmc-command.cfg"))

    PARSER = argparse.ArgumentParser(prog=__prog__, add_help=False)

    ALIAS = {}
    if CONF.has_section('alias'):
        for _KEY, _VALUE in CONF.items('alias'):
            ALIAS[_KEY] = _VALUE

    PARSER.add_argument('--host', metavar='<host>', default=CONF.get('XBMC', 'host'))

    PARSER.add_argument('--port', metavar='<port>', default=CONF.get('XBMC', 'port'))

    PARSER.add_argument('--timeout', metavar='<sec>', default=CONF.get('XBMC', 'timeout'))

    PARSER.add_argument('--help', action='help')
    PARSER.print_help = print_help

    PARSER.add_argument('--version', action='version')
    PARSER.version = __version__

    PARSER.add_argument('command', metavar='<command>')

    PARSER.add_argument('args', metavar='<args>', nargs=argparse.REMAINDER)

    __usage__ = PARSER.format_usage()

    ARGS = PARSER.parse_args()

    (ARGS.command, ARGS.args) = apply_alias(ALIAS, ARGS.command, ARGS.args)

    if not ARGS.timeout:
        ARGS.timeout = 5

    if ARGS.port:
        PORT_ERROR = "%s: error: argument --port: invalid int value: '%s'" % \
            (__prog__, ARGS.port)
        try:
            ARGS.port = int(ARGS.port)
            if ARGS.port < 0 or ARGS.port > 65535:
                exit_usage(PORT_ERROR)
        except ValueError:
            exit_usage(PORT_ERROR)

    TIMEOUT_ERROR = "%s: error: argument --timeout: invalid int value: '%s'" % \
        (__prog__, ARGS.timeout)
    try:
        ARGS.timeout = int(ARGS.timeout)
        if ARGS.timeout < 0:
            exit_usage(TIMEOUT_ERROR)
    except ValueError:
        exit_usage(TIMEOUT_ERROR)

    try:
        ARGS.command = command_type(ARGS.command)
    except RuntimeError as err:
        exit_usage('%s: error: %s' % (__prog__, str(err)))

    try:
        main(ARGS.host, ARGS.port, ARGS.timeout, ARGS.command, ARGS.args)
    except KeyboardInterrupt:
        sys.stdout.write('\n')

# vim: ft=python ts=8 sts=4 sw=4 et:
